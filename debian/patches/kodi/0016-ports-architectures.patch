From 5627432b717cf7df565c30490400ef11efa016e0 Mon Sep 17 00:00:00 2001
From: Vasyl Gello <vasek.gello@gmail.com>
Date: Fri, 30 Dec 2022 14:39:36 +0200
Subject: [PATCH] Introduce buildable Debian ports architectures

Tested by building against sid/ppc64 and running via
xvfb + x11vnc.

Signed-off-by: Vasyl Gello <vasek.gello@gmail.com>
---
 cmake/scripts/linux/ArchSetup.cmake | 18 ++++++++++++++++++
 xbmc/cores/DllLoader/DllLoader.h    |  1 +
 xbmc/cores/DllLoader/ldt_keeper.c   |  1 +
 xbmc/utils/MathUtils.h              |  1 +
 xbmc/utils/SystemInfo.cpp           | 19 ++++++++++++++++++-
 5 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/cmake/scripts/linux/ArchSetup.cmake b/cmake/scripts/linux/ArchSetup.cmake
index 4083483173..917d8f06a4 100644
--- a/cmake/scripts/linux/ArchSetup.cmake
+++ b/cmake/scripts/linux/ArchSetup.cmake
@@ -40,9 +40,27 @@ else()
   elseif(CPU MATCHES riscv64)
     set(ARCH riscv64)
     set(NEON False)
+  elseif(CPU MATCHES ppc)
+    set(ARCH ppc)
+    set(NEON False)
+  elseif(CPU MATCHES ppc64)
+    set(ARCH ppc64)
+    set(NEON False)
   elseif(CPU MATCHES ppc64le)
     set(ARCH ppc64le)
     set(NEON False)
+  elseif(CPU MATCHES m68k)
+    set(ARCH m68k)
+    set(NEON False)
+  elseif(CPU MATCHES sh4)
+    set(ARCH sh4)
+    set(NEON False)
+  elseif(CPU MATCHES sparc64)
+    set(ARCH sparc64)
+    set(NEON False)
+  elseif(CPU MATCHES alpha)
+    set(ARCH alpha)
+    set(NEON False)
   elseif(CPU MATCHES loongarch64)
     set(ARCH loongarch64)
     set(NEON False)
diff --git a/xbmc/cores/DllLoader/DllLoader.h b/xbmc/cores/DllLoader/DllLoader.h
index 79e019d0e3..216c2dd067 100644
--- a/xbmc/cores/DllLoader/DllLoader.h
+++ b/xbmc/cores/DllLoader/DllLoader.h
@@ -18,6 +18,7 @@
     !defined(__arc__) && \
     !defined(__arm__) && \
     !defined(__loongarch__) && \
+    !defined(__m68k__) && \
     !defined(__mips__) && \
     !defined(__powerpc__) && \
     !defined(__or1k__) && \
diff --git a/xbmc/cores/DllLoader/ldt_keeper.c b/xbmc/cores/DllLoader/ldt_keeper.c
index 325d50cb70..01e2e9ad61 100644
--- a/xbmc/cores/DllLoader/ldt_keeper.c
+++ b/xbmc/cores/DllLoader/ldt_keeper.c
@@ -24,6 +24,7 @@
     !defined(__arc__) &&\
     !defined(__arm__) && \
     !defined(__loongarch__) && \
+    !defined(__m68k__) && \
     !defined(__mips__) && \
     !defined(__or1k__) && \
     !defined(__powerpc__) && \
diff --git a/xbmc/utils/MathUtils.h b/xbmc/utils/MathUtils.h
index 2b1dbcc51f..62301deef9 100644
--- a/xbmc/utils/MathUtils.h
+++ b/xbmc/utils/MathUtils.h
@@ -29,6 +29,7 @@
     defined(__arm__) || \
     defined(__loongarch__) || \
     defined(_M_ARM) || \
+    defined(__m68k__) || \
     defined(__mips__) || \
     defined(__or1k__) || \
     defined(__powerpc__) || \
diff --git a/xbmc/utils/SystemInfo.cpp b/xbmc/utils/SystemInfo.cpp
index 6e4c1ff2a9..e3da06d70e 100644
--- a/xbmc/utils/SystemInfo.cpp
+++ b/xbmc/utils/SystemInfo.cpp
@@ -933,7 +933,8 @@ int CSysInfo::GetKernelBitness(void)
       std::string machine(un.machine);
       if (machine == "x86_64" || machine == "amd64" || machine == "arm64" || machine == "aarch64" ||
           machine == "ppc64" || machine == "ppc64el" || machine == "ppc64le" || machine == "ia64" ||
-          machine == "mips64" || machine == "s390x" || machine == "riscv64")
+          machine == "mips64" || machine == "s390x" || machine == "riscv64" ||
+          machine == "sparc64" || machine == "alpha")
         kernelBitness = 64;
       else
         kernelBitness = 32;
@@ -990,6 +991,14 @@ const std::string& CSysInfo::GetKernelCpuFamily(void)
         kernelCpuFamily = "PowerPC";
       else if (machine.compare(0, 5, "riscv", 5) == 0)
         kernelCpuFamily = "RISC-V";
+      else if (machine.compare(0, 4, "m68k", 4) == 0)
+        kernelCpuFamily = "m68k";
+      else if (machine.compare(0, 3, "sh4", 3) == 0)
+        kernelCpuFamily = "sh4";
+      else if (machine.compare(0, 7, "sparc64", 7) == 0)
+        kernelCpuFamily = "SPARC";
+      else if (machine.compare(0, 5, "alpha", 5) == 0)
+        kernelCpuFamily = "alpha";
     }
 #endif
     if (kernelCpuFamily.empty())
@@ -1373,6 +1382,14 @@ std::string CSysInfo::GetBuildTargetCpuFamily(void)
   return "PowerPC";
 #elif defined(__riscv)
   return "RISC-V";
+#elif defined(__m68k__)
+  return "m68k";
+#elif defined(__SH4__)
+  return "sh4";
+#elif defined(__sparc__)
+  return "SPARC";
+#elif defined(__alpha__)
+  return "alpha";
 #else
   return "unknown CPU family";
 #endif
-- 
2.39.0

